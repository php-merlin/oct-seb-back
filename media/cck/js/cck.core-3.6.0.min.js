/* Copyright (C) 2013 SEBLOD. All Rights Reserved. */
if("undefined"===typeof JCck)var JCck={};
(function($) {
	if("undefined"===typeof JCck.Core){JCck.Core={}};
	JCck.Core.doTask = function(id, task, form) {
		if (typeof(form) === 'undefined') {
			form = document.getElementById('adminForm');
		}
		var cb = form[id];
		var tasks = task.split('.');
		if (cb) {
			for (var i = 0; true; i++) {
				var cbx = form['cb'+i];
				if (!cbx)
					break;
				cbx.checked = false;
			} // for
			cb.checked = true;
			form.boxchecked.value = 1;
			if (tasks[0] == "update" && tasks[1] != ""){
				task = tasks[0];
				jQuery("#seblod_form").append('<input type="hidden" id="task2" name="task2" value="'+tasks[1]+'">');
			}
			Joomla.submitbutton(task);
		}
		return false;
	};
	JCck.Core.executeFunctionByName = function(functionName, context) {
		var args = [].slice.call(arguments).splice(2);
		var namespaces = functionName.split(".");
		var func = namespaces.pop();
		
		for (var i = 0; i < namespaces.length; i++) {
			context = context[namespaces[i]];
		}
		
		return context[func].apply(this, args);
	};
	JCck.Core.getModal = function(options) {
		var mr		=	myModal(options);
		mr.elements	=	$(this);
		mr.init($(this));
		return mr;
	};
	function myCheck(v, values) {if ($.inArray(v, values) >= 0) { return 1; } else { return 0; }}
	function myModal( options ) {	
		var mr	=	{};
		mr.parent	=	false;
		mr.modal	=	null;
		mr.defaults	=	{
			backdrop: true,
			body: true,
			callbacks: {},
			class: '',
			close: 'button-outside',
			header: true,
			html_navigation: '<a class="cck-nav prev" href="#"><span><</span></a><a class="cck-nav next" href="#"><span>></span></a>',
			html_button: '<button type="button" class="close" data-dismiss="modal"><span>x</span></button>',
			keyboard: false,
			loading: true,
			loop: false,
			mode: 'ajax',
			navigation: false,
			style: 'standard',
			title: false,
		};
		
		mr.settings =	$.extend(
			mr.defaults,
			options || {}
		);
		
		mr.elements		=	[];
		mr.currentIndex	=	0;
		
		mr.build = function () {
			mr.remove();
	
			if ( mr.settings.style == 'extended' || mr.settings.navigation ) {
				$( 'body' ).append( '<div id="modal-remote-parent" class="modal-remote-parent">' + ( mr.settings.navigation ? '<div class="modal-navigation-parent"><div class="modal-navigation-positioning"><div class="modal-navigation-container">' + mr.settings.html_navigation + '</div></div></div>' : '' ) + '<div class="modal-remote-positioning"><div class="modal-remote-container"><div id="modal-remote" class="modal fade ' + mr.settings.class + '">' + ( mr.settings.close != 'outside' ? mr.settings.html_button : '' ) + ( mr.settings.header ? '<div class="modal-header"><h3>' + ( mr.settings.title ? mr.settings.title : '' ) + '</h3></div>' : '' ) + '<div class="modal-content"><div class="modal-body">' + ( mr.settings.loading ? '<div class="loading"></div>' : '' ) + '</div></div></div></div></div>' );
				mr.parent	=	$( '#modal-remote-parent' );
			} else {
				$( 'body' ).append( '<div id="modal-remote" class="modal fade ' + mr.settings.class + '">' + ( mr.settings.close != 'outside' ? mr.settings.html_button : '' ) + ( mr.settings.header ? '<div class="modal-header"><h3>' + ( mr.settings.title ? mr.settings.title : '' ) + '</h3></div>' : '' ) + '<div class="modal-content"><div class="modal-body">' + ( mr.settings.loading ? '<div class="loading"></div>' : '' ) + '</div></div></div>' );
			}
			
			mr.modal	=	$( '#modal-remote' );
	
			mr.modal.modal({
				show: false,
				backdrop: mr.settings.backdrop
			});
	
			mr.modal.on( 'show', function(e) {
				e.stopPropagation();
				mr.callbacks.show();
			});
	
			mr.modal.on( 'shown', function(e) {
				e.stopPropagation();
				mr.callbacks.shown();
			});
	
			mr.modal.on( 'hide', function(e) {
				e.stopPropagation();
				mr.callbacks.hide();
			});
			
			mr.modal.on( 'hidden', function(e) {
				e.stopPropagation();
				mr.callbacks.hidden();
			});
			
			return mr;
		}

		mr.callbacks = {
			show: function () {
				console.log( 'show' );
				
				if ( mr.parent ) {
					mr.parent.find( 'a.cck-nav' ).addClass( 'no-nav' );
				}
				
				if ( "undefined" !== typeof mr.settings.callbacks.show ) {
					mr.settings.callbacks.show();
				}
			},
			load: function () {
				console.log( 'load' );
				
				if ( mr.parent ) {
					mr.parent.find( 'a.cck-nav' ).addClass( 'no-nav' );
				}
				
				if ( "undefined" !== typeof mr.settings.callbacks.load ) {
					mr.settings.callbacks.load();
				}
			},
			loaded: function () {
				console.log( 'loaded' );
				if ( mr.parent  && mr.elements.length > 1 ) {
					if ( mr.settings.loop ) {
						mr.parent.find( 'a.cck-nav' ).removeClass( 'no-nav' );
					} else {
						if ( mr.currentIndex != 0 ) {
							mr.parent.find( 'a.cck-nav.prev' ).removeClass( 'no-nav' );
						}
						
						if ( mr.currentIndex != mr.elements.length - 1 ) {
							mr.parent.find( 'a.cck-nav.next' ).removeClass( 'no-nav' );
						}
					}
				}
				
				if ( "undefined" !== typeof mr.settings.callbacks.loaded ) {
					mr.settings.callbacks.loaded();
				}
			},
			shown: function () {
				console.log( 'shown' );
				$( 'body' ).css( 'overflow', 'hidden' );
				if ( mr.settings.close != 'button' ) {
					$( '.modal-remote-container, [class*="modal-navigation-"]' ).on( 'click', function ( e ) {
						if ($( this ).is(e.target) ) {
							mr.hide();
						}
					});
				}
				
				if ( mr.settings.navigation ) {
					if ( mr.parent ) {
						mr.parent.find( 'a.cck-nav.prev' ).on( 'click' , function ( event ) {
							event.preventDefault();
							mr.loadPrev();
						});
						mr.parent.find( 'a.cck-nav.next' ).on( 'click' , function ( event ) {
							event.preventDefault();
							mr.loadNext();
						});
					}
					
					if ( mr.settings.keyboard ) {
						$(document.documentElement).on( "keyup", mr.keyboardHandler );
					}
				}
				
				if ( "undefined" !== typeof mr.settings.callbacks.shown ) {
					mr.settings.callbacks.shown();
				}
			},
			hide: function () {
				console.log( 'hide' );
				if ( "undefined" !== typeof mr.settings.callbacks.hide ) {
					mr.settings.callbacks.hide();
				}
			},
			hidden: function () {
				console.log( 'hidden' );
				$( 'body' ).css( 'overflow', 'visible' );
				mr.remove();
				
				if ( "undefined" !== typeof mr.settings.callbacks.hidden ) {
					mr.settings.callbacks.hidden();
				}
			},
			destroy: function () {
				console.log( 'destroy' );
				if ( "undefined" !== typeof mr.settings.callbacks.destroy ) {
					mr.settings.callbacks.destroy();
				}
				
				mr.remove();
				mr	=	{};
				
				console.log('destroyed');
				if ( "undefined" !== typeof mr.settings.callbacks.destroyed ) {
					mr.settings.callbacks.destroyed();
				}
			},
			destroyed: function () {
				console.log( 'destroyed' );
				if ( "undefined" !== typeof mr.settings.callbacks.destroyed ) {
					mr.settings.callbacks.destroyed();
				}
			}
		}
		
		mr.destroy = function () {
			mr.callbacks.destroy();
			return this;
		}
		
		mr.hide = function () {
			mr.modal.modal( 'hide' );
			return this;
		}
		
		mr.init = function () {
			mr.elements.each( function( idx ) {
				$(this).on( 'click', function( event ) {
					event.preventDefault();
					var link	=	$(this);
					var url		=	link.attr( 'href' );

					mr.settings =	$.extend(
						mr.settings,
						link.data( 'cck-modal' ) || {}
					);

					mr.loadRemote(url);
					
					mr.currentIndex		=	idx;
				});
			});
			
			return this;
		}
		
		mr.keyboardHandler = function ( event ) {
			event.preventDefault();
			
			switch (event.keyCode) {
				case 37:
					mr.loadPrev();
					break;
				case 39:
					mr.loadNext();
					break;
				case 88:
					mr.hide();
					break;
			}
		}
						
		mr.load = function ( url ) {
			mr.callbacks.load();
				
			var mc	=	mr.modal.find( '.modal-content' );
			
			switch ( mr.settings.mode ) {
				case 'iframe':
					var iframe_s	=	'<iframe src="' + url + '" width="100%" height="auto" frameborder="0"></iframe>';
					if ( mr.settings.body ) {
						mc.find( '.modal-body' ).append( iframe_s );
					} else {
						mc.find( '.modal-body' ).remove();
						mc.append( iframe_s );
					}
					
					if ( mr.settings.loading ) {
						mc.find( '.loading' ).remove();
					}
					
					mr.callbacks.loaded();
					break;
				default:
					if ( mr.settings.body ) {
						mc.find( '.modal-body' ).load( url, mr.callbacks.loaded );
					} else {
						mc.load( url, mr.callbacks.loaded );
					}
			}
			
			return this;
		}

		mr.loadPrev = function () {
			if ( mr.currentIndex == 0 ) {
				if ( mr.settings.loop ) {
					mr.currentIndex	=	( mr.elements.length - 1 );
				} else {
					return this;
				}
			} else {
				mr.currentIndex--;
			}
			
			mr.load( $( mr.elements[mr.currentIndex] ).attr( 'href' ) );
			return this;
		}

		mr.loadNext = function () {
			if ( mr.currentIndex == mr.elements.length - 1 ) {
				if ( mr.settings.loop ) {
					mr.currentIndex	=	0;
				} else {
					return this;
				}
			} else {
				mr.currentIndex++;
			}
			
			mr.load( $( mr.elements[mr.currentIndex] ).attr( 'href' ) );
			return this;
		}
		
		mr.loadRemote = function ( url ) {
			mr.build().load( url ).show();
		}
		
		mr.remove = function () {
			if ( mr.parent ) {
				$( 'body' ).find( '#modal-remote-parent' ).remove();
			} else {
				$( 'body' ).find( '#modal-remote' ).remove();
			}
			
			if ( mr.settings.keyboard ) {
				$(document.documentElement).off( "keyup", mr.keyboardHandler );
			}
			
			return this;
		}
		
		mr.show = function () {
			mr.modal.modal( 'show' );
			return this;
		}
		
		return mr;
	}
	function myOpposite(v) {return (v == 1) ? 0 : 1;}	
	$.fn.clearForm = function() {
	  // iterate each matching form
	  return this.each(function() {
		// iterate the elements within the form
		$(':input', this).each(function() {
		  var type = this.type, tag = this.tagName.toLowerCase();
		  if (type == 'text' || type == 'password' || tag == 'textarea')
			this.value = '';
		  else if (type == 'checkbox' || type == 'radio')
			this.checked = false;
		  else if (tag == 'select')
			this.value = '';
		});
	  });
	};
	$.fn.conditionalState	=	function(opts) {
		var slave	= $(this);
		var rule	= opts.rule || "";
		if (opts.conditions.length>1) {
			var len		= (rule == "or") ? 1 : opts.conditions.length;
			var resX	= {};
			jQuery.each(opts.conditions, function(i,condition) {
				var master = $('#'+condition.trigger);
				if (condition.trigger && master != null) {
					var ev = condition.type;
					if (ev == "isChanged") {
						ev = "change";
					} else if (ev == "isPressed") {
						ev = "click";
					} else {
						resX[master.attr("id")] = parseInt(master.myConditional(condition.type, condition));
						var r = 0;
						jQuery.each(resX, function(k,v) {
							if (v == 1) {r++;}
						});
						if (r >= len) {res = 1;} else {res = 0;}
						jQuery.each(opts.states, function(k,opt) {
							slave.myState(0, res, opt.type, opt);
						});
						ev = "change";
					}
					master.live(ev, function() {
						resX[master.attr("id")] = parseInt(master.myConditional(condition.type, condition));
						var r = 0;
						jQuery.each(resX, function(k,v) {
							if (v == 1) {r++;}
						});
						if (r >= len) {res = 1;} else {res = 0;}
						jQuery.each(opts.states, function(k,opt) {
							slave.myState(1, res, opt.type, opt);
						});
					});
				}
			});
		} else {
			var master	= $('#'+opts.conditions[0].trigger);
			if (opts.conditions[0].trigger && master != null) {
				var ev = opts.conditions[0].type;
				if (ev == "isChanged") {
					ev = "change";
				} else if (ev == "isPressed") {
					ev = "click";
				} else {
					var res = master.myConditional(opts.conditions[0].type, opts.conditions[0]);
					jQuery.each(opts.states, function(k,opt) {
						slave.myState(0, res, opt.type, opt);
					});
					ev = "change";
				}
				master.live(ev, function() {
					var res = master.myConditional(opts.conditions[0].type, opts.conditions[0]);
					jQuery.each(opts.states, function(k,opt) {
						slave.myState(1, res, opt.type, opt);
					});
				});
			}
		}
	};
	$.fn.conditionalStateLegacy	=	function(opts) {
		var master	= $('#'+opts.conditions._0isEqual.trigger);
		var slave	= $(this);
		if (opts.conditions._0isEqual.trigger && master != null) {
			var res = master.myConditional("isEqual", opts.conditions._0isEqual);
			jQuery.each(opts.states, function(k,opt) {
				slave.myState(0, res, k.substr(2), opt);
			});
			master.live("change", function() {
				var res = master.myConditional("isEqual", opts.conditions._0isEqual);
				jQuery.each(opts.states, function(k,opt) {
					slave.myState(1, res, k.substr(2), opt);
				});
			});
		}
	};
	$.fn.conditionalStates	=	function(opts) {
		var slave = $(this);
		var len   = opts.length;
		if (len === undefined) {
			if(opts.rule) {slave.conditionalState(opts);} else {slave.conditionalStateLegacy(opts);}
		} else {
			for (var i=0; i<len; i++) {
				if(opts[i].rule) {slave.conditionalState(opts[i]);} else {slave.conditionalStateLegacy(opts[i]);}
			}
		}
	};
	$.fn.deepestHeight = function() { var h = 0; $(this).each(function() { h = Math.max(h, $(this).height()); }).height(h);	};
	$.fn.isStillReady = function() { if ($(this).hasClass("busy")) { return false; } else { $(this).addClass("busy"); return true; } };
	$.fn.myAttr = function(a) {
		var $el = $(this);
		if ($el.is("select")) {
			var v = $.trim($el.find("option:selected").attr(a));
		} else if ($el.is("fieldset")) {
			var v = $.trim($el.find("input:checked").attr(a));
		} else {
			var v = $.trim($el.attr(a));
		}
		return v;
	}
	$.fn.myConditional = function(condition, opts) {
		var el	= this.attr("id");
		var status = 0;
		if (!$(this).length) {return 0;}
		switch (condition) {
			case 'callFunction':
				var func = opts.value;
				if ( window[func] ) {
					status = window[func]();
				}
				break;
			case 'isChanged':
			case 'isPressed':
				return 1;
				break;
			case 'isFilled':
			case 'isEmpty':
				if ($(this).myVal() !== undefined && $(this).myVal() !== null && $(this).myVal()!="") { status = 1; }
				if (condition=='isEmpty') { status = myOpposite(status); }
				break;
			case 'isEqual':
			case 'isDifferent':
			default:
				var values = opts.value.split(',');
				/*if ($(this).is("fieldset") {*/
				if ( this[0].tagName == 'FIELDSET' ) {
					var v = "";
					if ($('#'+el+' input:checked').length > 1) {
						$('#'+el+' input:checked').each(function() {
							v =  parseInt(myCheck($(this).val(), values));
							status = status + v;
						});
					} else {
						if ($('#'+el+' input:checked').length == 1) {
							v = $('#'+el+' input:checked').val();
						}
						status = myCheck(v, values);
					}
				} else {
					status = myCheck(this.val(), values);
				}
				if (status > 0) { status = 1; } else { status = 0; }
				if (condition=='isDifferent') { status = myOpposite(status); }
				break;
		}
		return status;
	}
	$.fn.myState = function(run, status, state, opts) {
		var el	= this.attr("id")+opts.selector;
		var val = opts.value;
		var revert = (opts.revert == "0") ? 0 : 1;
		switch (state) {
			case 'hasClass':
			case 'hasNotClass':
				if (state=='hasNotClass'){ status = myOpposite(status); revert = 1; }
				if (status == 1) {
					$("#"+el).addClass(val);
				} else if (revert) {
					$("#"+el).removeClass(val);
				}
				break;
			case 'isEnabled':
			case 'isDisabled':
				if (state=='isDisabled'){ status = myOpposite(status); revert = 1; }
				if (status == 1) {
					$("#"+el).prop("disabled", false);
				} else if (revert) {
					$("#"+el).prop("disabled", true);
				}
				break;
			case 'isFilled':
			case 'isFilledBy':
			case 'isEmpty':
				if (state=='isEmpty'){ status = myOpposite(status); revert = 1; }
				var el2 = $("#"+el).attr("id");
				var fct = "";
				if (status == 1) {
					if (state=="isFilledBy") {
						var attr = val.split('@');
						if (attr[1]) {
							val = $("#"+attr[0]).myAttr(attr[1]);
						} else {
							val = $("#"+val).myVal();
						}
					}
					fct = ($("#"+el).is(":input") || $("#"+el).is("fieldset")) ? "myVal" : "text";
					$("#"+el)[fct](val);
					if($("#_"+el2).length){
						fct = ($("#_"+el2).is(":input") ? "myVal" : "text");
						$("#_"+el2)[fct](val);
					}
				} else if (revert) {
					fct = ($("#"+el).is(":input") || $("#"+el).is("fieldset")) ? "val" : "text";
					$("#"+el)[fct]("");	/*todo myVal|myEmpty*/
					if($("#_"+el2).length){
						fct = ($("#_"+el2).is(":input") ? "val" : "text");
						$("#_"+el2)[fct]("");
					}
				}
				break;
			case 'isComputed':
				// recalc();
				break;
			case 'triggers':
				var el2 = $("#"+el).attr("id");
				$("#"+el2).trigger(val);
				break;
			case 'isVisible':
			case 'isHidden':
			default:
				if (state=='isHidden') { status = myOpposite(status); revert = 1; }
				if (run == 0) { val = ""; }
				if (status == 1) {
					if (val == "fade") { $("#"+el).fadeIn(); } else if (val == "slide") { $("#"+el).slideDown(); } else { $("#"+el).show(); }
				} else if (revert) {
					if (val == "fade") { $("#"+el).fadeOut(); } else if (val == "slide") { $("#"+el).slideUp(); } else { $("#"+el).hide(); }
				}			
				break;
		}
	}
	$.fn.myVal = function(v) {
		if (arguments.length == 1) {
			var a = 1;
		} else {
			var a = 0;
			var v = "";
		}
		if (!this[0]){
			return "";
		}
		var elem = this[0];
		if ( elem.tagName == 'FIELDSET' || elem.tagName == 'DIV' ) {
			var eid = '#'+this.attr("id");
			var val = "";
			if (v) {
				$(eid+' input').val(v.split(','));
			} else {
				if ($(eid+' input:checked').length > 1) {
					$(eid+' input:checked').each(function() {
						val +=  ","+$(this).val();
					});
					return val.substr(1);
				} else {
					if ($(eid+' input:checked').length == 1) {
						return $(eid+' input:checked').val();
					}
				}
			}
		} else if ( elem.tagName == 'SELECT' && this.prop("multiple") ) {
			return (a) ? (v ? this.val(v.split(',')) : this.val(v)) : this.val();
		} else {
			return (a) ? this.val(v) : this.val();
		}
	}	
	$.fn.CckModal = function(options) {
		var mr		=	myModal(options);
		mr.elements	=	$(this);
		mr.init($(this));
		return mr;
	}
	$(document).ready( function() {
		$('a[data-cck-modal]').CckModal();
	});
})(jQuery);